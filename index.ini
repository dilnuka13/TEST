import React, { useState, useEffect, createContext, useContext } from 'react';
import { initializeApp } from 'firebase/app';
import { getAuth, signInWithPopup, GoogleAuthProvider, onAuthStateChanged, signInWithCustomToken, signInAnonymously, signOut } from 'firebase/auth';
import { getFirestore, doc, getDoc, setDoc, collection, query, onSnapshot, updateDoc } from 'firebase/firestore';

// Global variables provided by the Canvas environment
const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {
  apiKey: "AIzaSyD6yXDHsOaqVplfhsXZV8nWvMuioDulwYg",
  authDomain: "edu-login-4d05f.firebaseapp.com",
  projectId: "edu-login-4d05f",
  storageBucket: "edu-login-4d05f.firebasestorage.app",
  messagingSenderId: "197092856272",
  appId: "1:197092856272:web:a00b0169e46e7d5acca9d5",
  measurementId: "G-TM21CT4GJ9"
};
const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;

// Initialize Firebase
const app = initializeApp(firebaseConfig);
const auth = getAuth(app);
const db = getFirestore(app);

// Create a context for user and language
const AppContext = createContext();

// Custom hook to use the app context
const useAppContext = () => useContext(AppContext);

// Language data
const languages = {
  si: {
    appName: "EduPapers.lk",
    signInWithGoogle: "Google ගිණුමෙන් පුරනය වන්න",
    welcome: "සාදරයෙන් පිළිගනිමු",
    newAccountPrompt: "ඔබ නව පරිශීලකයෙක්ද? කරුණාකර ඔබේ විස්තර ඇතුළත් කරන්න.",
    profileSetup: "ගිණුම් තොරතුරු සකසන්න",
    subjectStream: "විෂය ධාරාව",
    selectStream: "විෂය ධාරාවක් තෝරන්න",
    arts: "කලා",
    commerce: "වාණිජ",
    science: "විද්‍යා",
    maths: "ගණිතය",
    technology: "තාක්ෂණවේදය",
    examYear: "විභාග වර්ෂය",
    nic: "ජාතික හැඳුනුම්පත් අංකය",
    address: "ලිපිනය",
    phoneNumber: "දුරකථන අංකය",
    olResults: "සාමාන්‍ය පෙළ ප්‍රතිඵල (විකල්ප)",
    profilePicture: "ගිණුම් ඡායාරූපය",
    useGooglePic: "Google ගිණුමේ ඡායාරූපය භාවිතා කරන්න",
    uploadNewPic: "නව ඡායාරූපයක් උඩුගත කරන්න (URL)",
    saveProfile: "ගිණුම් තොරතුරු සුරකින්න",
    profileUpdated: "ගිණුම් තොරතුරු සාර්ථකව යාවත්කාලීන කරන ලදී!",
    profileSaved: "ගිණුම් තොරතුරු සාර්ථකව සුරැකිණි!",
    errorSavingProfile: "ගිණුම් තොරතුරු සුරැකීමේදී දෝෂයක් සිදුවිය.",
    dashboard: "ප්‍රධාන පිටුව",
    quizzes: "ප්‍රශ්නාවලි",
    contactDeveloper: "ඩිවලොපර් අමතන්න",
    logout: "ඉවත් වන්න",
    myProfile: "මගේ ගිණුම",
    selectSubject: "විෂයයක් තෝරන්න",
    quizInstructions: "ප්‍රශ්නාවලිය ආරම්භ කිරීමට විෂයයක් තෝරන්න.",
    startQuiz: "ප්‍රශ්නාවලිය ආරම්භ කරන්න",
    submitQuiz: "පිළිතුරු ඉදිරිපත් කරන්න",
    yourScore: "ඔබේ ලකුණු",
    correctAnswers: "නිවැරදි පිළිතුරු",
    incorrectAnswers: "වැරදි පිළිතුරු",
    reviewAnswers: "පිළිතුරු සමාලෝචනය කරන්න",
    question: "ප්‍රශ්නය",
    yourAnswer: "ඔබේ පිළිතුර",
    correctAnswer: "නිවැරදි පිළිතුර",
    contactUs: "අප අමතන්න",
    name: "නම",
    email: "විද්‍යුත් තැපෑල",
    message: "පණිවිඩය",
    sendMessage: "පණිවිඩය යවන්න",
    messageSent: "ඔබගේ පණිවිඩය සාර්ථකව යවන ලදී!",
    errorSendingMessage: "පණිවිඩය යැවීමේදී දෝෂයක් සිදුවිය.",
    loading: "පූරණය වෙමින්...",
    noQuizzes: "මෙම විෂය සඳහා ප්‍රශ්නාවලි නොමැත.",
    pleaseFillAllFields: "කරුණාකර සියලුම අවශ්‍ය ක්ෂේත්‍ර පුරවන්න.",
    invalidEmail: "වලංගු විද්‍යුත් තැපැල් ලිපිනයක් ඇතුළත් කරන්න.",
    invalidPhone: "වලංගු දුරකථන අංකයක් ඇතුළත් කරන්න.",
    invalidNIC: "වලංගු ජාතික හැඳුනුම්පත් අංකයක් ඇතුළත් කරන්න.",
    invalidExamYear: "වලංගු විභාග වර්ෂයක් ඇතුළත් කරන්න.",
    invalidImageUrl: "වලංගු ඡායාරූප URL එකක් ඇතුළත් කරන්න.",
    subjectNotSelected: "කරුණාකර විෂය ධාරාවක් තෝරන්න."
  },
  en: {
    appName: "EduPapers.lk",
    signInWithGoogle: "Sign In with Google",
    welcome: "Welcome",
    newAccountPrompt: "You are a new user. Please set up your profile.",
    profileSetup: "Profile Setup",
    subjectStream: "Subject Stream",
    selectStream: "Select a Stream",
    arts: "Arts",
    commerce: "Commerce",
    science: "Science",
    maths: "Mathematics",
    technology: "Technology",
    examYear: "Exam Year",
    nic: "National ID Card No.",
    address: "Address",
    phoneNumber: "Phone Number",
    olResults: "O/L Results (Optional)",
    profilePicture: "Profile Picture",
    useGooglePic: "Use Google Profile Picture",
    uploadNewPic: "Upload New Picture (URL)",
    saveProfile: "Save Profile",
    profileUpdated: "Profile updated successfully!",
    profileSaved: "Profile saved successfully!",
    errorSavingProfile: "Error saving profile.",
    dashboard: "Dashboard",
    quizzes: "Quizzes",
    contactDeveloper: "Contact Developer",
    logout: "Logout",
    myProfile: "My Profile",
    selectSubject: "Select a Subject",
    quizInstructions: "Select a subject to start a quiz.",
    startQuiz: "Start Quiz",
    submitQuiz: "Submit Quiz",
    yourScore: "Your Score",
    correctAnswers: "Correct Answers",
    incorrectAnswers: "Incorrect Answers",
    reviewAnswers: "Review Answers",
    question: "Question",
    yourAnswer: "Your Answer",
    correctAnswer: "Correct Answer",
    contactUs: "Contact Us",
    name: "Name",
    email: "Email",
    message: "Message",
    sendMessage: "Send Message",
    messageSent: "Your message has been sent successfully!",
    errorSendingMessage: "Error sending message.",
    loading: "Loading...",
    noQuizzes: "No quizzes available for this subject.",
    pleaseFillAllFields: "Please fill all required fields.",
    invalidEmail: "Please enter a valid email address.",
    invalidPhone: "Please enter a valid phone number.",
    invalidNIC: "Please enter a valid NIC.",
    invalidExamYear: "Please enter a valid exam year.",
    invalidImageUrl: "Please enter a valid image URL.",
    subjectNotSelected: "Please select a subject stream."
  }
};

// Utility function to get translated text
const getText = (lang, key) => languages[lang][key] || key;

// Subject data mapping (Sinhala to English for internal use)
const subjectMap = {
  "කලා": "Arts",
  "වාණිජ": "Commerce",
  "විද්‍යා": "Science",
  "ගණිතය": "Mathematics",
  "තාක්ෂණවේදය": "Technology",
};

const reverseSubjectMap = {
  "Arts": "කලා",
  "Commerce": "වාණිජ",
  "Science": "විද්‍යා",
  "Mathematics": "ගණිතය",
  "Technology": "තාක්ෂණවේදය",
};

const getSubjectsByStream = (stream, lang) => {
  const subjects = {
    "Arts": lang === 'si' ? ["සිංහල", "ඉතිහාසය", "දේශපාලන විද්‍යාව", "ආර්ථික විද්‍යාව", "බුද්ධ ධර්මය"] : ["Sinhala", "History", "Political Science", "Economics", "Buddhism"],
    "Commerce": lang === 'si' ? ["ගිණුම්කරණය", "ව්‍යාපාර අධ්‍යයනය", "ආර්ථික විද්‍යාව"] : ["Accounting", "Business Studies", "Economics"],
    "Science": lang === 'si' ? ["භෞතික විද්‍යාව", "රසායන විද්‍යාව", "ජීව විද්‍යාව"] : ["Physics", "Chemistry", "Biology"],
    "Mathematics": lang === 'si' ? ["ඒකාබද්ධ ගණිතය", "රසායන විද්‍යාව", "භෞතික විද්‍යාව"] : ["Combined Maths", "Chemistry", "Physics"],
    "Technology": lang === 'si' ? ["ඉංජිනේරු තාක්ෂණවේදය", "ජෛව පද්ධති තාක්ෂණවේදය", "විද්‍යාව"] : ["Engineering Technology", "Bio Systems Technology", "Science"]
  };
  return subjects[subjectMap[stream] || stream] || [];
};

// Quiz data (example data)
const sampleQuizzes = {
  "Science": [
    {
      id: "sci-quiz-1",
      title: "භෞතික විද්‍යාව - ප්‍රශ්නාවලිය 1",
      questions: [
        {
          question: "ආලෝකයේ වේගය ආසන්න වශයෙන් කොපමණද?",
          options: ["3 x 10^8 m/s", "3 x 10^5 km/s", "300,000 km/s", "ඉහත සියල්ල"],
          answer: "3 x 10^8 m/s"
        },
        {
          question: "ඕම් නියමය කුමක්ද?",
          options: ["V = IR", "P = VI", "E = mc^2", "F = ma"],
          answer: "V = IR"
        }
      ]
    },
    {
      id: "sci-quiz-2",
      title: "රසායන විද්‍යාව - ප්‍රශ්නාවලිය 1",
      questions: [
        {
          question: "ජලයේ රසායනික සූත්‍රය කුමක්ද?",
          options: ["H2O", "CO2", "O2", "NaCl"],
          answer: "H2O"
        },
        {
          question: "ආවර්තිතා වගුවේ පළමු මූලද්‍රව්‍යය කුමක්ද?",
          options: ["ඔක්සිජන්", "හයිඩ්‍රජන්", "නයිට්‍රජන්", "කාබන්"],
          answer: "හයිඩ්‍රජන්"
        }
      ]
    }
  ],
  "Arts": [
    {
      id: "arts-quiz-1",
      title: "ඉතිහාසය - ප්‍රශ්නාවලිය 1",
      questions: [
        {
          question: "අනුරාධපුර රාජධානියේ පළමු රජු කවුද?",
          options: ["දේවානම්පියතිස්ස", "පණ්ඩුකාභය", "දුටුගැමුණු", "විජය"],
          answer: "පණ්ඩුකාභය"
        },
        {
          question: "මහාවංශය රචනා කළේ කවුද?",
          options: ["මහානාම හිමි", "වැලගම්බා රජු", "පරාක්‍රමබාහු I", "නිශ්ශංකමල්ල රජු"],
          answer: "මහානාම හිමි"
        }
      ]
    }
  ],
  // Add more sample quizzes for other streams
};

// Main App Component
const App = () => {
  const [user, setUser] = useState(null);
  const [userId, setUserId] = useState(null);
  const [userProfile, setUserProfile] = useState(null);
  const [currentPage, setCurrentPage] = useState('auth');
  const [isAuthReady, setIsAuthReady] = useState(false);
  const [loading, setLoading] = useState(true);
  const [language, setLanguage] = useState('si'); // Default language Sinhala

  useEffect(() => {
    // Firebase Auth Listener
    const unsubscribe = onAuthStateChanged(auth, async (currentUser) => {
      if (currentUser) {
        const currentUserId = currentUser.uid;
        setUserId(currentUserId);
        setUser(currentUser);

        // Try to sign in with custom token if available, otherwise anonymously
        if (initialAuthToken) {
          try {
            await signInWithCustomToken(auth, initialAuthToken);
            console.log("Signed in with custom token.");
          } catch (error) {
            console.error("Error signing in with custom token:", error);
            // Fallback to anonymous if custom token fails
            await signInAnonymously(auth);
            console.log("Signed in anonymously as custom token failed.");
          }
        } else {
          await signInAnonymously(auth);
          console.log("Signed in anonymously as no custom token provided.");
        }

        // Fetch user profile
        const userDocRef = doc(db, `artifacts/${appId}/users/${currentUserId}/profile`, 'data');
        const docSnap = await getDoc(userDocRef);

        if (docSnap.exists()) {
          setUserProfile(docSnap.data());
          setCurrentPage('dashboard'); // Go to dashboard if profile exists
        } else {
          setCurrentPage('profileSetup'); // Go to profile setup if new user
        }
      } else {
        setUser(null);
        setUserId(null);
        setUserProfile(null);
        setCurrentPage('auth'); // Go to auth page if no user
      }
      setIsAuthReady(true);
      setLoading(false);
    });

    return () => unsubscribe();
  }, []); // Run once on component mount

  // Subscribe to real-time profile updates
  useEffect(() => {
    if (userId && isAuthReady) {
      const userDocRef = doc(db, `artifacts/${appId}/users/${userId}/profile`, 'data');
      const unsubscribe = onSnapshot(userDocRef, (docSnap) => {
        if (docSnap.exists()) {
          setUserProfile(docSnap.data());
        } else {
          setUserProfile(null);
        }
      }, (error) => {
        console.error("Error listening to profile updates:", error);
      });
      return () => unsubscribe();
    }
  }, [userId, isAuthReady]);

  const handleLogout = async () => {
    try {
      await signOut(auth);
      setCurrentPage('auth');
      setUser(null);
      setUserId(null);
      setUserProfile(null);
      console.log("User logged out successfully.");
    } catch (error) {
      console.error("Error logging out:", error);
    }
  };

  const contextValue = {
    user,
    userId,
    userProfile,
    setUserProfile,
    setCurrentPage,
    language,
    setLanguage,
    getText,
    handleLogout,
    loading,
    isAuthReady,
    appId,
    db,
    auth
  };

  if (loading || !isAuthReady) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-500 to-purple-600">
        <div className="text-white text-2xl font-bold animate-pulse">{getText(language, 'loading')}</div>
      </div>
    );
  }

  return (
    <AppContext.Provider value={contextValue}>
      <div className="min-h-screen bg-gray-100 font-inter flex flex-col">
        {currentPage !== 'auth' && <Navbar />}
        <main className="flex-grow p-4 md:p-8 flex items-center justify-center">
          {currentPage === 'auth' && <AuthPage />}
          {currentPage === 'profileSetup' && <ProfileSetupPage />}
          {currentPage === 'dashboard' && <DashboardPage />}
          {currentPage === 'quizzes' && <QuizPage />}
          {currentPage === 'contact' && <ContactPage />}
        </main>
      </div>
    </AppContext.Provider>
  );
};

// Navbar Component
const Navbar = () => {
  const { user, userProfile, setCurrentPage, language, setLanguage, getText, handleLogout } = useAppContext();
  const [showDropdown, setShowDropdown] = useState(false);

  const toggleLanguage = () => {
    setLanguage(prevLang => (prevLang === 'si' ? 'en' : 'si'));
  };

  const profilePic = userProfile?.profilePicture || user?.photoURL || `https://placehold.co/40x40/cccccc/000000?text=${user?.displayName ? user.displayName[0] : 'U'}`;

  return (
    <nav className="bg-gradient-to-r from-blue-600 to-purple-700 p-4 shadow-lg rounded-b-xl">
      <div className="container mx-auto flex justify-between items-center">
        <div className="flex items-center">
          {/* Logo */}
          <img
            src="https://placehold.co/150x50/000000/FFFFFF?text=EduPapers.lk" // Placeholder for EduPapers.lk logo
            alt="EduPapers.lk Logo"
            className="h-10 w-auto rounded-lg shadow-md mr-4 cursor-pointer transform transition-transform duration-300 hover:scale-105"
            onClick={() => setCurrentPage('dashboard')}
          />
          <h1 className="text-white text-2xl font-bold transition-transform duration-300 hover:scale-105 cursor-pointer"
              onClick={() => setCurrentPage('dashboard')}>
            {getText(language, 'appName')}
          </h1>
        </div>

        <div className="flex items-center space-x-4">
          {/* Language Toggle */}
          <button
            onClick={toggleLanguage}
            className="px-4 py-2 bg-blue-700 text-white rounded-lg shadow-md hover:bg-blue-800 transition duration-300 transform hover:scale-105"
          >
            {language === 'si' ? 'English' : 'සිංහල'}
          </button>

          {/* Navigation Links */}
          <button
            onClick={() => setCurrentPage('dashboard')}
            className="text-white hover:text-blue-200 transition duration-300 transform hover:scale-105"
          >
            {getText(language, 'dashboard')}
          </button>
          <button
            onClick={() => setCurrentPage('quizzes')}
            className="text-white hover:text-blue-200 transition duration-300 transform hover:scale-105"
          >
            {getText(language, 'quizzes')}
          </button>
          <button
            onClick={() => setCurrentPage('contact')}
            className="text-white hover:text-blue-200 transition duration-300 transform hover:scale-105"
          >
            {getText(language, 'contactDeveloper')}
          </button>

          {/* User Avatar and Dropdown */}
          <div className="relative">
            <img
              src={profilePic}
              alt="User Avatar"
              className="w-10 h-10 rounded-full border-2 border-white cursor-pointer shadow-lg transform transition-transform duration-300 hover:scale-110"
              onClick={() => setShowDropdown(!showDropdown)}
            />
            {showDropdown && (
              <div className="absolute right-0 mt-2 w-48 bg-white rounded-lg shadow-xl py-2 z-10 animate-fade-in">
                <button
                  onClick={() => { setCurrentPage('profileSetup'); setShowDropdown(false); }}
                  className="block w-full text-left px-4 py-2 text-gray-800 hover:bg-gray-100 transition duration-200"
                >
                  {getText(language, 'myProfile')}
                </button>
                <button
                  onClick={handleLogout}
                  className="block w-full text-left px-4 py-2 text-red-600 hover:bg-gray-100 transition duration-200"
                >
                  {getText(language, 'logout')}
                </button>
              </div>
            )}
          </div>
        </div>
      </div>
    </nav>
  );
};

// Auth Page Component
const AuthPage = () => {
  const { setCurrentPage, language, getText, auth, db, appId, setUserProfile, setUser, setUserId } = useAppContext();
  const [loadingAuth, setLoadingAuth] = useState(false);
  const [authError, setAuthError] = useState('');

  const handleGoogleSignIn = async () => {
    setLoadingAuth(true);
    setAuthError('');
    try {
      const provider = new GoogleAuthProvider();
      const result = await signInWithPopup(auth, provider);
      const user = result.user;
      const currentUserId = user.uid;

      setUserId(currentUserId);
      setUser(user);

      // Check if user profile exists in Firestore
      const userDocRef = doc(db, `artifacts/${appId}/users/${currentUserId}/profile`, 'data');
      const docSnap = await getDoc(userDocRef);

      if (docSnap.exists()) {
        // User exists, log them in
        setUserProfile(docSnap.data());
        setCurrentPage('dashboard');
      } else {
        // New user, redirect to profile setup
        setCurrentPage('profileSetup');
      }
    } catch (error) {
      console.error("Google Sign-In Error:", error);
      setAuthError(error.message);
    } finally {
      setLoadingAuth(false);
    }
  };

  return (
    <div className="flex flex-col items-center justify-center min-h-screen w-full bg-gradient-to-br from-blue-500 to-purple-600 p-4">
      <div className="bg-white p-8 md:p-12 rounded-xl shadow-2xl text-center max-w-lg w-full transform transition-all duration-500 hover:scale-105 animate-fade-in">
        <img
          src="https://placehold.co/200x60/000000/FFFFFF?text=EduPapers.lk" // Placeholder for EduPapers.lk logo
          alt="EduPapers.lk Logo"
          className="mx-auto mb-8 rounded-lg shadow-md"
        />
        <h2 className="text-3xl font-bold text-gray-800 mb-6 animate-bounce-in">{getText(language, 'welcome')}</h2>
        <p className="text-gray-600 mb-8 text-lg">{getText(language, 'newAccountPrompt')}</p>
        <button
          onClick={handleGoogleSignIn}
          disabled={loadingAuth}
          className="bg-blue-600 text-white py-3 px-6 rounded-lg shadow-lg hover:bg-blue-700 transition duration-300 transform hover:scale-105 flex items-center justify-center mx-auto text-lg font-semibold"
        >
          {loadingAuth ? (
            <svg className="animate-spin h-5 w-5 mr-3 text-white" viewBox="0 0 24 24">
              <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
              <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
          ) : (
            <>
              <svg className="w-6 h-6 mr-3" viewBox="0 0 24 24" fill="currentColor">
                <path d="M12.24 10.285V11.2h.087c1.334 0 2.417.973 2.417 2.179 0 1.206-1.083 2.179-2.417 2.179-.988 0-1.831-.564-2.181-1.31h-.087v.883H9.72V9.01h2.52zm-.087-4.116c2.42 0 4.38 1.96 4.38 4.38s-1.96 4.38-4.38 4.38-4.38-1.96-4.38-4.38 1.96-4.38 4.38-4.38zM12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zM12 20c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"/>
              </svg>
              {getText(language, 'signInWithGoogle')}
            </>
          )}
        </button>
        {authError && <p className="text-red-500 mt-4 text-sm">{authError}</p>}
      </div>
    </div>
  );
};

// Profile Setup Page Component
const ProfileSetupPage = () => {
  const { user, userId, userProfile, setUserProfile, setCurrentPage, language, getText, db, appId } = useAppContext();
  const [formData, setFormData] = useState({
    subjectStream: userProfile?.subjectStream || '',
    examYear: userProfile?.examYear || '',
    nic: userProfile?.nic || '',
    address: userProfile?.address || '',
    phoneNumber: userProfile?.phoneNumber || '',
    olResults: userProfile?.olResults || '',
    profilePicture: userProfile?.profilePicture || user?.photoURL || '',
    useGooglePic: userProfile?.profilePicture === user?.photoURL || !userProfile?.profilePicture ? true : false,
  });
  const [message, setMessage] = useState('');
  const [messageType, setMessageType] = useState(''); // 'success' or 'error'
  const [loadingSave, setLoadingSave] = useState(false);

  useEffect(() => {
    // Update form data if userProfile changes (e.g., when editing existing profile)
    if (userProfile) {
      setFormData({
        subjectStream: userProfile.subjectStream || '',
        examYear: userProfile.examYear || '',
        nic: userProfile.nic || '',
        address: userProfile.address || '',
        phoneNumber: userProfile.phoneNumber || '',
        olResults: userProfile.olResults || '',
        profilePicture: userProfile.profilePicture || user?.photoURL || '',
        useGooglePic: userProfile.profilePicture === user?.photoURL || !userProfile.profilePicture ? true : false,
      });
    } else if (user) {
      // For new users, pre-fill with Google photoURL
      setFormData(prev => ({ ...prev, profilePicture: user.photoURL || '' }));
    }
  }, [userProfile, user]);

  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: type === 'checkbox' ? checked : value
    }));
  };

  const handleSaveProfile = async (e) => {
    e.preventDefault();
    setLoadingSave(true);
    setMessage('');
    setMessageType('');

    // Client-side validation
    if (!formData.subjectStream || !formData.examYear || !formData.nic || !formData.address || !formData.phoneNumber) {
      setMessage(getText(language, 'pleaseFillAllFields'));
      setMessageType('error');
      setLoadingSave(false);
      return;
    }
    if (!/^\S+@\S+\.\S+$/.test(formData.email || user.email)) { // Assuming email is from Google, but if editable, validate
        // setMessage(getText(language, 'invalidEmail'));
        // setMessageType('error');
        // setLoadingSave(false);
        // return;
    }
    if (!/^\d{10}$/.test(formData.phoneNumber)) {
      setMessage(getText(language, 'invalidPhone'));
      setMessageType('error');
      setLoadingSave(false);
      return;
    }
    if (!/^[0-9]{9}[vVxX]$|^[0-9]{12}$/.test(formData.nic)) {
      setMessage(getText(language, 'invalidNIC'));
      setMessageType('error');
      setLoadingSave(false);
      return;
    }
    if (!/^\d{4}$/.test(formData.examYear)) {
      setMessage(getText(language, 'invalidExamYear'));
      setMessageType('error');
      setLoadingSave(false);
      return;
    }
    if (!formData.useGooglePic && formData.profilePicture && !/^https?:\/\/.+\.(jpg|jpeg|png|gif|svg)$/i.test(formData.profilePicture)) {
        setMessage(getText(language, 'invalidImageUrl'));
        setMessageType('error');
        setLoadingSave(false);
        return;
    }
    if (!formData.subjectStream) {
        setMessage(getText(language, 'subjectNotSelected'));
        setMessageType('error');
        setLoadingSave(false);
        return;
    }


    try {
      const profileData = {
        name: user.displayName,
        email: user.email,
        googleId: user.uid,
        subjectStream: formData.subjectStream,
        examYear: formData.examYear,
        nic: formData.nic,
        address: formData.address,
        phoneNumber: formData.phoneNumber,
        olResults: formData.olResults,
        profilePicture: formData.useGooglePic ? user.photoURL : formData.profilePicture,
        lastUpdated: new Date(),
      };

      const userDocRef = doc(db, `artifacts/${appId}/users/${userId}/profile`, 'data');
      await setDoc(userDocRef, profileData, { merge: true }); // Use merge to update existing fields

      setUserProfile(profileData);
      setMessage(userProfile ? getText(language, 'profileUpdated') : getText(language, 'profileSaved'));
      setMessageType('success');
      setCurrentPage('dashboard'); // Redirect to dashboard after saving
    } catch (error) {
      console.error("Error saving profile:", error);
      setMessage(getText(language, 'errorSavingProfile'));
      setMessageType('error');
    } finally {
      setLoadingSave(false);
    }
  };

  const subjectStreams = [
    { value: 'Arts', label: getText(language, 'arts') },
    { value: 'Commerce', label: getText(language, 'commerce') },
    { value: 'Science', label: getText(language, 'science') },
    { value: 'Mathematics', label: getText(language, 'maths') },
    { value: 'Technology', label: getText(language, 'technology') },
  ];

  return (
    <div className="flex items-center justify-center w-full min-h-screen bg-gradient-to-br from-blue-500 to-purple-600 p-4">
      <div className="bg-white p-8 md:p-10 rounded-xl shadow-2xl max-w-2xl w-full transform transition-all duration-500 hover:scale-105 animate-fade-in">
        <h2 className="text-3xl font-bold text-gray-800 mb-6 text-center animate-bounce-in">{getText(language, 'profileSetup')}</h2>
        {message && (
          <div className={`p-3 mb-4 rounded-lg text-white text-center ${messageType === 'success' ? 'bg-green-500' : 'bg-red-500'} animate-fade-in`}>
            {message}
          </div>
        )}
        <form onSubmit={handleSaveProfile} className="space-y-6">
          {/* Profile Picture */}
          <div className="flex flex-col items-center mb-6">
            <img
              src={formData.profilePicture || `https://placehold.co/100x100/cccccc/000000?text=${user?.displayName ? user.displayName[0] : 'U'}`}
              alt="Profile"
              className="w-24 h-24 rounded-full object-cover border-4 border-blue-400 shadow-md mb-4"
            />
            <div className="flex items-center space-x-4">
              <label className="flex items-center cursor-pointer">
                <input
                  type="checkbox"
                  name="useGooglePic"
                  checked={formData.useGooglePic}
                  onChange={handleChange}
                  className="form-checkbox h-5 w-5 text-blue-600 rounded-md transition duration-150 ease-in-out"
                />
                <span className="ml-2 text-gray-700">{getText(language, 'useGooglePic')}</span>
              </label>
            </div>
            {!formData.useGooglePic && (
              <input
                type="url"
                name="profilePicture"
                value={formData.profilePicture}
                onChange={handleChange}
                placeholder={getText(language, 'uploadNewPic')}
                className="mt-4 p-3 border border-gray-300 rounded-lg w-full focus:ring-2 focus:ring-blue-500 focus:border-transparent transition duration-200 shadow-sm"
              />
            )}
          </div>

          {/* Subject Stream */}
          <div>
            <label htmlFor="subjectStream" className="block text-gray-700 text-sm font-semibold mb-2">
              {getText(language, 'subjectStream')} <span className="text-red-500">*</span>
            </label>
            <select
              id="subjectStream"
              name="subjectStream"
              value={formData.subjectStream}
              onChange={handleChange}
              className="p-3 border border-gray-300 rounded-lg w-full focus:ring-2 focus:ring-blue-500 focus:border-transparent transition duration-200 shadow-sm appearance-none"
              required
            >
              <option value="">{getText(language, 'selectStream')}</option>
              {subjectStreams.map((stream) => (
                <option key={stream.value} value={stream.value}>
                  {stream.label}
                </option>
              ))}
            </select>
          </div>

          {/* Exam Year */}
          <div>
            <label htmlFor="examYear" className="block text-gray-700 text-sm font-semibold mb-2">
              {getText(language, 'examYear')} <span className="text-red-500">*</span>
            </label>
            <input
              type="text"
              id="examYear"
              name="examYear"
              value={formData.examYear}
              onChange={handleChange}
              placeholder="උදා: 2025 / Ex: 2025"
              className="p-3 border border-gray-300 rounded-lg w-full focus:ring-2 focus:ring-blue-500 focus:border-transparent transition duration-200 shadow-sm"
              required
            />
          </div>

          {/* NIC */}
          <div>
            <label htmlFor="nic" className="block text-gray-700 text-sm font-semibold mb-2">
              {getText(language, 'nic')} <span className="text-red-500">*</span>
            </label>
            <input
              type="text"
              id="nic"
              name="nic"
              value={formData.nic}
              onChange={handleChange}
              placeholder="උදා: 123456789V / Ex: 199012345678"
              className="p-3 border border-gray-300 rounded-lg w-full focus:ring-2 focus:ring-blue-500 focus:border-transparent transition duration-200 shadow-sm"
              required
            />
          </div>

          {/* Address */}
          <div>
            <label htmlFor="address" className="block text-gray-700 text-sm font-semibold mb-2">
              {getText(language, 'address')} <span className="text-red-500">*</span>
            </label>
            <textarea
              id="address"
              name="address"
              value={formData.address}
              onChange={handleChange}
              placeholder="ඔබේ ලිපිනය / Your Address"
              rows="3"
              className="p-3 border border-gray-300 rounded-lg w-full focus:ring-2 focus:ring-blue-500 focus:border-transparent transition duration-200 shadow-sm"
              required
            ></textarea>
          </div>

          {/* Phone Number */}
          <div>
            <label htmlFor="phoneNumber" className="block text-gray-700 text-sm font-semibold mb-2">
              {getText(language, 'phoneNumber')} <span className="text-red-500">*</span>
            </label>
            <input
              type="tel"
              id="phoneNumber"
              name="phoneNumber"
              value={formData.phoneNumber}
              onChange={handleChange}
              placeholder="උදා: 0771234567 / Ex: 0712345678"
              className="p-3 border border-gray-300 rounded-lg w-full focus:ring-2 focus:ring-blue-500 focus:border-transparent transition duration-200 shadow-sm"
              required
            />
          </div>

          {/* O/L Results (Optional) */}
          <div>
            <label htmlFor="olResults" className="block text-gray-700 text-sm font-semibold mb-2">
              {getText(language, 'olResults')}
            </label>
            <textarea
              id="olResults"
              name="olResults"
              value={formData.olResults}
              onChange={handleChange}
              placeholder="ඔබේ සාමාන්‍ය පෙළ ප්‍රතිඵල / Your O/L Results"
              rows="2"
              className="p-3 border border-gray-300 rounded-lg w-full focus:ring-2 focus:ring-blue-500 focus:border-transparent transition duration-200 shadow-sm"
            ></textarea>
          </div>

          <button
            type="submit"
            disabled={loadingSave}
            className="w-full bg-blue-600 text-white py-3 px-6 rounded-lg shadow-lg hover:bg-blue-700 transition duration-300 transform hover:scale-105 text-lg font-semibold flex items-center justify-center"
          >
            {loadingSave ? (
              <svg className="animate-spin h-5 w-5 mr-3 text-white" viewBox="0 0 24 24">
                <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
              </svg>
            ) : (
              getText(language, 'saveProfile')
            )}
          </button>
        </form>
      </div>
    </div>
  );
};

// Dashboard Page Component
const DashboardPage = () => {
  const { userProfile, setCurrentPage, language, getText } = useAppContext();

  if (!userProfile) {
    return (
      <div className="flex items-center justify-center w-full bg-gray-100 p-4">
        <div className="text-center text-gray-700 text-xl">{getText(language, 'loading')}</div>
      </div>
    );
  }

  const stream = userProfile.subjectStream;
  const subjects = getSubjectsByStream(stream, language);

  return (
    <div className="flex flex-col items-center w-full p-4 md:p-8">
      <div className="bg-white p-6 md:p-8 rounded-xl shadow-2xl max-w-4xl w-full animate-fade-in transform transition-all duration-500 hover:scale-[1.01]">
        <h2 className="text-3xl font-bold text-gray-800 mb-8 text-center animate-bounce-in">
          {getText(language, 'welcome')}, {userProfile.name}!
        </h2>
        <p className="text-gray-600 text-lg mb-8 text-center">
          {getText(language, 'subjectStream')}: <span className="font-semibold text-blue-600">{language === 'si' ? reverseSubjectMap[stream] : stream}</span>
        </p>

        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
          {subjects.length > 0 ? (
            subjects.map((subject, index) => (
              <div
                key={index}
                className="bg-gradient-to-br from-blue-500 to-purple-600 text-white p-6 rounded-xl shadow-lg flex flex-col items-center justify-center text-center cursor-pointer transform transition-all duration-300 hover:scale-105 hover:shadow-xl animate-pop-in"
                style={{ animationDelay: `${index * 0.1}s` }}
                onClick={() => setCurrentPage('quizzes')} // Can pass subject if quizzes are subject-specific
              >
                <div className="text-5xl mb-4">📚</div> {/* Placeholder icon */}
                <h3 className="text-xl font-semibold mb-2">{subject}</h3>
                <p className="text-sm opacity-90">{language === 'si' ? "පාඩම් සහ ප්‍රශ්නාවලි" : "Lessons & Quizzes"}</p>
              </div>
            ))
          ) : (
            <p className="col-span-full text-center text-gray-600 text-lg">{language === 'si' ? "ඔබේ විෂය ධාරාවට අදාළ විෂයයන් නොමැත." : "No subjects available for your stream."}</p>
          )}
        </div>
      </div>
    </div>
  );
};

// Quiz Page Component
const QuizPage = () => {
  const { userProfile, language, getText } = useAppContext();
  const [selectedSubject, setSelectedSubject] = useState('');
  const [currentQuiz, setCurrentQuiz] = useState(null);
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [userAnswers, setUserAnswers] = useState({});
  const [showResults, setShowResults] = useState(false);
  const [score, setScore] = useState(0);

  const stream = userProfile?.subjectStream;
  const subjects = getSubjectsByStream(stream, language);

  const handleSubjectSelect = (subject) => {
    setSelectedSubject(subject);
    setCurrentQuiz(null); // Reset current quiz
    setShowResults(false); // Hide results
  };

  const startQuiz = (quiz) => {
    setCurrentQuiz(quiz);
    setCurrentQuestionIndex(0);
    setUserAnswers({});
    setShowResults(false);
    setScore(0);
  };

  const handleAnswerSelect = (questionIndex, option) => {
    setUserAnswers(prev => ({ ...prev, [questionIndex]: option }));
  };

  const nextQuestion = () => {
    if (currentQuestionIndex < currentQuiz.questions.length - 1) {
      setCurrentQuestionIndex(prev => prev + 1);
    }
  };

  const prevQuestion = () => {
    if (currentQuestionIndex > 0) {
      setCurrentQuestionIndex(prev => prev - 1);
    }
  };

  const submitQuiz = () => {
    let correctCount = 0;
    currentQuiz.questions.forEach((q, index) => {
      if (userAnswers[index] === q.answer) {
        correctCount++;
      }
    });
    setScore(correctCount);
    setShowResults(true);
  };

  const getQuizDataForSubject = (subject) => {
    const englishSubject = language === 'si' ? subjectMap[subject] || subject : subject;
    const quizzes = sampleQuizzes[englishSubject] || [];
    return quizzes.map(quiz => ({
        ...quiz,
        title: language === 'si' ? quiz.title : quiz.title.replace("ප්‍රශ්නාවලිය", "Quiz").replace("භෞතික විද්‍යාව", "Physics").replace("රසායන විද්‍යාව", "Chemistry").replace("ඉතිහාසය", "History") // Simple translation for titles
    }));
  };

  const currentQuestion = currentQuiz?.questions[currentQuestionIndex];

  return (
    <div className="flex flex-col items-center w-full p-4 md:p-8">
      <div className="bg-white p-6 md:p-8 rounded-xl shadow-2xl max-w-4xl w-full animate-fade-in transform transition-all duration-500 hover:scale-[1.01]">
        <h2 className="text-3xl font-bold text-gray-800 mb-8 text-center animate-bounce-in">{getText(language, 'quizzes')}</h2>

        {!selectedSubject ? (
          <div className="text-center">
            <p className="text-gray-600 text-lg mb-6">{getText(language, 'selectSubject')}</p>
            <div className="grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 gap-4">
              {subjects.map((subject, index) => (
                <button
                  key={index}
                  onClick={() => handleSubjectSelect(subject)}
                  className="bg-blue-500 text-white py-3 px-4 rounded-lg shadow-md hover:bg-blue-600 transition duration-300 transform hover:scale-105 animate-pop-in"
                  style={{ animationDelay: `${index * 0.1}s` }}
                >
                  {subject}
                </button>
              ))}
            </div>
          </div>
        ) : (
          <div>
            <h3 className="text-2xl font-semibold text-gray-700 mb-6 text-center">{selectedSubject} {language === 'si' ? "ප්‍රශ්නාවලි" : "Quizzes"}</h3>
            <div className="flex justify-center mb-6">
              <button
                onClick={() => handleSubjectSelect('')}
                className="bg-gray-300 text-gray-800 py-2 px-4 rounded-lg shadow-md hover:bg-gray-400 transition duration-300 transform hover:scale-105"
              >
                {language === 'si' ? "විෂය වෙනස් කරන්න" : "Change Subject"}
              </button>
            </div>

            {!currentQuiz ? (
              <div className="space-y-4">
                {getQuizDataForSubject(selectedSubject).length > 0 ? (
                  getQuizDataForSubject(selectedSubject).map((quiz) => (
                    <div key={quiz.id} className="bg-blue-100 p-4 rounded-lg shadow-md flex justify-between items-center animate-fade-in">
                      <span className="text-lg font-medium text-gray-800">{quiz.title}</span>
                      <button
                        onClick={() => startQuiz(quiz)}
                        className="bg-green-500 text-white py-2 px-4 rounded-lg shadow-md hover:bg-green-600 transition duration-300 transform hover:scale-105"
                      >
                        {getText(language, 'startQuiz')}
                      </button>
                    </div>
                  ))
                ) : (
                  <p className="text-center text-gray-600 text-lg">{getText(language, 'noQuizzes')}</p>
                )}
              </div>
            ) : (
              <div className="bg-blue-50 p-6 rounded-xl shadow-lg animate-fade-in">
                <h4 className="text-xl font-semibold text-gray-800 mb-4">{currentQuiz.title}</h4>
                {!showResults ? (
                  <div>
                    <p className="text-lg font-medium text-gray-700 mb-4">
                      {getText(language, 'question')} {currentQuestionIndex + 1} / {currentQuiz.questions.length}
                    </p>
                    <p className="text-xl font-bold text-gray-900 mb-6">{currentQuestion.question}</p>
                    <div className="space-y-3">
                      {currentQuestion.options.map((option, idx) => (
                        <button
                          key={idx}
                          onClick={() => handleAnswerSelect(currentQuestionIndex, option)}
                          className={`w-full text-left p-4 rounded-lg border-2 transition duration-300 transform hover:scale-[1.01] ${
                            userAnswers[currentQuestionIndex] === option
                              ? 'bg-blue-600 text-white border-blue-700 shadow-md'
                              : 'bg-white text-gray-800 border-gray-300 hover:bg-gray-50'
                          }`}
                        >
                          {option}
                        </button>
                      ))}
                    </div>
                    <div className="flex justify-between mt-8">
                      <button
                        onClick={prevQuestion}
                        disabled={currentQuestionIndex === 0}
                        className="bg-gray-400 text-white py-2 px-5 rounded-lg shadow-md hover:bg-gray-500 transition duration-300 transform hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed"
                      >
                        {language === 'si' ? "පෙර" : "Previous"}
                      </button>
                      {currentQuestionIndex < currentQuiz.questions.length - 1 ? (
                        <button
                          onClick={nextQuestion}
                          className="bg-blue-600 text-white py-2 px-5 rounded-lg shadow-md hover:bg-blue-700 transition duration-300 transform hover:scale-105"
                        >
                          {language === 'si' ? "ඊළඟ" : "Next"}
                        </button>
                      ) : (
                        <button
                          onClick={submitQuiz}
                          className="bg-green-600 text-white py-2 px-5 rounded-lg shadow-md hover:bg-green-700 transition duration-300 transform hover:scale-105"
                        >
                          {getText(language, 'submitQuiz')}
                        </button>
                      )}
                    </div>
                  </div>
                ) : (
                  // Quiz Results
                  <div className="text-center">
                    <h5 className="text-2xl font-bold text-blue-700 mb-4">{getText(language, 'yourScore')}: {score} / {currentQuiz.questions.length}</h5>
                    <p className="text-lg text-gray-700 mb-2">{getText(language, 'correctAnswers')}: {score}</p>
                    <p className="text-lg text-gray-700 mb-6">{getText(language, 'incorrectAnswers')}: {currentQuiz.questions.length - score}</p>
                    <button
                      onClick={() => setShowResults(false)} // Go back to quiz questions for review
                      className="bg-purple-600 text-white py-2 px-5 rounded-lg shadow-md hover:bg-purple-700 transition duration-300 transform hover:scale-105 mr-4"
                    >
                      {getText(language, 'reviewAnswers')}
                    </button>
                    <button
                      onClick={() => setCurrentQuiz(null)} // Go back to quiz list
                      className="bg-gray-500 text-white py-2 px-5 rounded-lg shadow-md hover:bg-gray-600 transition duration-300 transform hover:scale-105"
                    >
                      {language === 'si' ? "වෙනත් ප්‍රශ්නාවලියක්" : "Another Quiz"}
                    </button>

                    {/* Review Answers Section */}
                    <div className="mt-8 text-left border-t pt-6 border-gray-200">
                      <h6 className="text-xl font-bold text-gray-800 mb-4">{getText(language, 'reviewAnswers')}</h6>
                      {currentQuiz.questions.map((q, index) => (
                        <div key={index} className="mb-6 p-4 rounded-lg bg-gray-50 shadow-sm border border-gray-200">
                          <p className="font-semibold text-gray-900 mb-2">
                            {getText(language, 'question')} {index + 1}: {q.question}
                          </p>
                          <p className="text-gray-700 text-sm mb-1">
                            {getText(language, 'yourAnswer')}: <span className={userAnswers[index] === q.answer ? 'text-green-600 font-medium' : 'text-red-600 font-medium'}>
                              {userAnswers[index] || (language === 'si' ? "පිළිතුරු දී නැත" : "Not Answered")}
                            </span>
                          </p>
                          <p className="text-gray-700 text-sm">
                            {getText(language, 'correctAnswer')}: <span className="text-green-600 font-medium">{q.answer}</span>
                          </p>
                        </div>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  );
};

// Contact Page Component
const ContactPage = () => {
  const { language, getText } = useAppContext();
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    message: ''
  });
  const [messageStatus, setMessageStatus] = useState(''); // 'success' or 'error'
  const [loadingSend, setLoadingSend] = useState(false);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoadingSend(true);
    setMessageStatus('');

    // Basic validation
    if (!formData.name || !formData.email || !formData.message) {
      setMessageStatus('error');
      alert(getText(language, 'pleaseFillAllFields')); // Using alert for simplicity, ideally a custom modal
      setLoadingSend(false);
      return;
    }
    if (!/^\S+@\S+\.\S+$/.test(formData.email)) {
      setMessageStatus('error');
      alert(getText(language, 'invalidEmail')); // Using alert for simplicity, ideally a custom modal
      setLoadingSend(false);
      return;
    }

    try {
      // Simulate sending message (in a real app, this would send to a backend service)
      console.log("Contact form submitted:", formData);
      await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate API call
      setMessageStatus('success');
      setFormData({ name: '', email: '', message: '' }); // Clear form
      alert(getText(language, 'messageSent')); // Using alert for simplicity, ideally a custom modal
    } catch (error) {
      console.error("Error sending message:", error);
      setMessageStatus('error');
      alert(getText(language, 'errorSendingMessage')); // Using alert for simplicity, ideally a custom modal
    } finally {
      setLoadingSend(false);
    }
  };

  return (
    <div className="flex items-center justify-center w-full p-4 md:p-8">
      <div className="bg-white p-8 md:p-10 rounded-xl shadow-2xl max-w-xl w-full transform transition-all duration-500 hover:scale-105 animate-fade-in">
        <h2 className="text-3xl font-bold text-gray-800 mb-8 text-center animate-bounce-in">{getText(language, 'contactUs')}</h2>
        <form onSubmit={handleSubmit} className="space-y-6">
          <div>
            <label htmlFor="name" className="block text-gray-700 text-sm font-semibold mb-2">
              {getText(language, 'name')} <span className="text-red-500">*</span>
            </label>
            <input
              type="text"
              id="name"
              name="name"
              value={formData.name}
              onChange={handleChange}
              placeholder={getText(language, 'name')}
              className="p-3 border border-gray-300 rounded-lg w-full focus:ring-2 focus:ring-blue-500 focus:border-transparent transition duration-200 shadow-sm"
              required
            />
          </div>
          <div>
            <label htmlFor="email" className="block text-gray-700 text-sm font-semibold mb-2">
              {getText(language, 'email')} <span className="text-red-500">*</span>
            </label>
            <input
              type="email"
              id="email"
              name="email"
              value={formData.email}
              onChange={handleChange}
              placeholder="you@example.com"
              className="p-3 border border-gray-300 rounded-lg w-full focus:ring-2 focus:ring-blue-500 focus:border-transparent transition duration-200 shadow-sm"
              required
            />
          </div>
          <div>
            <label htmlFor="message" className="block text-gray-700 text-sm font-semibold mb-2">
              {getText(language, 'message')} <span className="text-red-500">*</span>
            </label>
            <textarea
              id="message"
              name="message"
              value={formData.message}
              onChange={handleChange}
              placeholder={getText(language, 'message')}
              rows="5"
              className="p-3 border border-gray-300 rounded-lg w-full focus:ring-2 focus:ring-blue-500 focus:border-transparent transition duration-200 shadow-sm"
              required
            ></textarea>
          </div>
          <button
            type="submit"
            disabled={loadingSend}
            className="w-full bg-blue-600 text-white py-3 px-6 rounded-lg shadow-lg hover:bg-blue-700 transition duration-300 transform hover:scale-105 text-lg font-semibold flex items-center justify-center"
          >
            {loadingSend ? (
              <svg className="animate-spin h-5 w-5 mr-3 text-white" viewBox="0 0 24 24">
                <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
              </svg>
            ) : (
              getText(language, 'sendMessage')
            )}
          </button>
        </form>
      </div>
    </div>
  );
};

export default App;
